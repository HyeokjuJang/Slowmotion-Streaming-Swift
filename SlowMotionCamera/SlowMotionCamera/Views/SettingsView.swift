//
//  SettingsView.swift
//  SlowMotionCamera
//
//  설정 화면 UI
//

import SwiftUI

struct SettingsView: View {

    @ObservedObject var settings: CameraSettings
    @Binding var isPresented: Bool

    var onConnect: () -> Void

    var body: some View {
        NavigationView {
            Form {
                // 서버 설정 섹션
                Section(header: Text("서버 설정")) {
                    TextField("WebSocket URL", text: $settings.serverURL)
                        .textInputAutocapitalization(.never)
                        .autocorrectionDisabled()
                        .keyboardType(.URL)
                        .placeholder(when: settings.serverURL.isEmpty) {
                            Text("ws://192.168.1.100:8080/camera")
                                .foregroundColor(.gray)
                        }

                    if !settings.serverURL.isEmpty && !settings.isServerURLValid {
                        Text("유효하지 않은 URL입니다. ws:// 또는 wss://로 시작해야 합니다.")
                            .font(.caption)
                            .foregroundColor(.red)
                    }

                    Text("자동 생성된 업로드 URL: \(settings.autoGeneratedUploadURL)")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }

                // 녹화 설정 섹션
                Section(header: Text("녹화 설정")) {
                    VStack(alignment: .leading, spacing: 8) {
                        Text("FPS")
                            .font(.subheadline)
                            .foregroundColor(.secondary)

                        Picker("FPS", selection: $settings.recordingFPS) {
                            ForEach(Constants.Recording.supportedFPS, id: \.self) { fps in
                                Text("\(fps)fps").tag(fps)
                            }
                        }
                        .pickerStyle(.segmented)
                    }

                    VStack(alignment: .leading, spacing: 8) {
                        Text("해상도")
                            .font(.subheadline)
                            .foregroundColor(.secondary)

                        Picker("해상도", selection: $settings.recordingResolutionName) {
                            ForEach(Constants.Recording.supportedResolutions.keys.sorted(), id: \.self) { name in
                                Text(name).tag(name)
                            }
                        }
                        .pickerStyle(.segmented)
                        .onChange(of: settings.recordingResolutionName) { _, newValue in
                            settings.setRecordingResolution(name: newValue)
                        }
                    }
                }

                // 스트리밍 설정 섹션
                Section(header: Text("스트리밍 설정")) {
                    Toggle("스트리밍 비활성화", isOn: $settings.disableStreaming)

                    if settings.disableStreaming {
                        Text("카메라는 평소에 꺼져있고, 녹화 신호를 받으면 120fps로 녹화하여 자동 업로드합니다.")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }

                    if !settings.disableStreaming {
                        VStack(alignment: .leading, spacing: 8) {
                            Text("전송 모드")
                                .font(.subheadline)
                                .foregroundColor(.secondary)

                            Picker("전송 모드", selection: $settings.streamingMode) {
                                ForEach(StreamingMode.allCases, id: \.self) { mode in
                                    Text(mode.rawValue).tag(mode)
                                }
                            }
                            .pickerStyle(.segmented)
                        }
                    }

                    if !settings.disableStreaming {
                        VStack(alignment: .leading, spacing: 8) {
                            Text("FPS")
                                .font(.subheadline)
                                .foregroundColor(.secondary)

                            Picker("FPS", selection: $settings.streamingFPS) {
                                ForEach(Constants.Streaming.supportedFPS, id: \.self) { fps in
                                    Text("\(fps)fps").tag(fps)
                                }
                            }
                            .pickerStyle(.segmented)
                        }

                        VStack(alignment: .leading, spacing: 8) {
                            Text("해상도")
                                .font(.subheadline)
                                .foregroundColor(.secondary)

                            Picker("해상도", selection: $settings.streamingResolutionName) {
                                ForEach(Constants.Streaming.supportedResolutions.keys.sorted(), id: \.self) { name in
                                    Text(name).tag(name)
                                }
                            }
                            .pickerStyle(.segmented)
                            .onChange(of: settings.streamingResolutionName) { _, newValue in
                                settings.setStreamingResolution(name: newValue)
                            }
                        }

                        // WebSocket 모드일 때만 JPEG 품질 표시
                        if settings.streamingMode == .webSocket {
                            VStack(alignment: .leading, spacing: 8) {
                                Text("JPEG 품질: \(Int(settings.jpegQuality * 100))%")
                                    .font(.subheadline)
                                    .foregroundColor(.secondary)

                                Slider(value: $settings.jpegQuality, in: 0.5...1.0, step: 0.05)
                            }
                        }

                        VStack(alignment: .leading, spacing: 8) {
                            Text("대역폭: \(settings.bandwidthKbps) kbps (\(String(format: "%.1f", Double(settings.bandwidthKbps) / 1000.0)) Mbps)")
                                .font(.subheadline)
                                .foregroundColor(.secondary)

                            Slider(value: Binding(
                                get: { Double(settings.bandwidthKbps) },
                                set: { settings.bandwidthKbps = Int($0) }
                            ), in: 500...5000, step: 100)
                        }
                    }
                }

                // 연결 버튼
                Section {
                    Button(action: {
                        settings.saveSettings()
                        onConnect()
                    }) {
                        HStack {
                            Spacer()
                            Text("연결 및 대기 시작")
                                .fontWeight(.semibold)
                            Spacer()
                        }
                    }
                    .disabled(!settings.isServerURLValid)
                }
            }
            .navigationTitle("설정")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("완료") {
                        settings.saveSettings()
                        isPresented = false
                    }
                }
            }
        }
    }
}

// MARK: - Placeholder Modifier

extension View {
    func placeholder<Content: View>(
        when shouldShow: Bool,
        alignment: Alignment = .leading,
        @ViewBuilder placeholder: () -> Content
    ) -> some View {
        ZStack(alignment: alignment) {
            placeholder().opacity(shouldShow ? 1 : 0)
            self
        }
    }
}

//
//  CameraSettings.swift
//  SlowMotionCamera
//
//  카메라 및 서버 설정 데이터 모델
//

import Foundation
import CoreGraphics

/// 전송 모드 열거형
enum StreamingMode: String, CaseIterable {
    case webSocket = "WebSocket"
    case webRTC = "WebRTC"
}

class CameraSettings: ObservableObject {

    // MARK: - Server Settings
    @Published var serverURL: String = ""
    @Published var uploadURL: String = ""

    // MARK: - Recording Settings
    @Published var recordingFPS: Int32 = Constants.Recording.defaultFPS
    @Published var recordingResolution: CGSize = Constants.Recording.defaultResolution
    @Published var recordingResolutionName: String = "1080p"

    // MARK: - Streaming Settings
    @Published var streamingMode: StreamingMode = .webSocket  // 기본값: WebSocket
    @Published var streamingFPS: Int32 = Constants.Streaming.defaultFPS
    @Published var streamingResolution: CGSize = Constants.Streaming.defaultResolution
    @Published var streamingResolutionName: String = "360p"  // 최저 latency 위해 360p로 변경
    @Published var jpegQuality: CGFloat = Constants.Streaming.jpegQuality
    @Published var bandwidthKbps: Int = 2000  // 대역폭 (kbps), 기본값 2Mbps

    // MARK: - Computed Properties

    /// WebSocket URL 유효성 검사
    var isServerURLValid: Bool {
        return serverURL.hasPrefix("ws://") || serverURL.hasPrefix("wss://")
    }

    /// 업로드 URL 자동 생성
    var autoGeneratedUploadURL: String {
        guard isServerURLValid else { return "" }

        // WebSocket URL에서 HTTP URL 생성
        var httpURL = serverURL
            .replacingOccurrences(of: "ws://", with: "http://")
            .replacingOccurrences(of: "wss://", with: "https://")

        // 포트 8080을 3000으로 변경 (WebSocket 포트 → HTTP 포트)
        httpURL = httpURL.replacingOccurrences(of: ":8080", with: ":3000")

        // /camera 경로를 /upload로 변경
        if httpURL.hasSuffix("/camera") {
            return httpURL.replacingOccurrences(of: "/camera", with: "/upload")
        }

        // 기본 업로드 경로 추가
        let baseURL = httpURL.components(separatedBy: "/").prefix(3).joined(separator: "/")
        return baseURL + "/upload"
    }

    // MARK: - Initialization

    init() {
        // UserDefaults에서 설정 복원
        loadSettings()
    }

    // MARK: - Persistence

    func saveSettings() {
        UserDefaults.standard.set(serverURL, forKey: "serverURL")
        UserDefaults.standard.set(uploadURL, forKey: "uploadURL")
        UserDefaults.standard.set(recordingFPS, forKey: "recordingFPS")
        UserDefaults.standard.set(recordingResolutionName, forKey: "recordingResolutionName")
        UserDefaults.standard.set(streamingMode.rawValue, forKey: "streamingMode")
        UserDefaults.standard.set(streamingFPS, forKey: "streamingFPS")
        UserDefaults.standard.set(streamingResolutionName, forKey: "streamingResolutionName")
        UserDefaults.standard.set(jpegQuality, forKey: "jpegQuality")
        UserDefaults.standard.set(bandwidthKbps, forKey: "bandwidthKbps")
    }

    func loadSettings() {
        // 이전 버전의 잘못된 데이터 제거 (한 번만 실행)
        UserDefaults.standard.removeObject(forKey: "recordingResolution")
        UserDefaults.standard.removeObject(forKey: "streamingResolution")

        if let savedServerURL = UserDefaults.standard.string(forKey: "serverURL") {
            serverURL = savedServerURL
        }

        if let savedUploadURL = UserDefaults.standard.string(forKey: "uploadURL") {
            uploadURL = savedUploadURL
        }

        let savedRecordingFPS = UserDefaults.standard.object(forKey: "recordingFPS") as? Int32
        if let fps = savedRecordingFPS {
            recordingFPS = fps
        }

        if let savedName = UserDefaults.standard.string(forKey: "recordingResolutionName") {
            recordingResolutionName = savedName
            // 이름으로부터 해상도 복원
            setRecordingResolution(name: savedName)
        }

        if let savedModeString = UserDefaults.standard.string(forKey: "streamingMode"),
           let savedMode = StreamingMode(rawValue: savedModeString) {
            streamingMode = savedMode
        }

        let savedStreamingFPS = UserDefaults.standard.object(forKey: "streamingFPS") as? Int32
        if let fps = savedStreamingFPS {
            streamingFPS = fps
        }

        if let savedName = UserDefaults.standard.string(forKey: "streamingResolutionName") {
            streamingResolutionName = savedName
            // 이름으로부터 해상도 복원
            setStreamingResolution(name: savedName)
        }

        let savedQuality = UserDefaults.standard.object(forKey: "jpegQuality") as? CGFloat
        if let quality = savedQuality {
            jpegQuality = quality
        }

        let savedBandwidth = UserDefaults.standard.object(forKey: "bandwidthKbps") as? Int
        if let bandwidth = savedBandwidth {
            bandwidthKbps = bandwidth
        }
    }

    // MARK: - Helper Methods

    func setRecordingResolution(name: String) {
        if let resolution = Constants.Recording.supportedResolutions[name] {
            recordingResolution = resolution
            recordingResolutionName = name
        }
    }

    func setStreamingResolution(name: String) {
        if let resolution = Constants.Streaming.supportedResolutions[name] {
            streamingResolution = resolution
            streamingResolutionName = name
        }
    }
}

//
//  CameraView.swift
//  SlowMotionCamera
//
//  메인 녹화 화면
//

import SwiftUI
import AVFoundation

class CameraViewController: ObservableObject {

    // MARK: - Properties

    @Published var settings: CameraSettings
    @Published var state: RecordingStateManager

    private let cameraManager = CameraManager()
    private let webSocketManager = WebSocketManager()
    private var streamingManager: StreamingManager?
    private let uploadManager = UploadManager()

    private var recordingTimer: Timer?

    // MARK: - Initialization

    init(settings: CameraSettings, state: RecordingStateManager) {
        self.settings = settings
        self.state = state

        self.streamingManager = StreamingManager(webSocketManager: webSocketManager, settings: settings)

        setupManagers()
    }

    // MARK: - Setup

    private func setupManagers() {
        cameraManager.delegate = self
        webSocketManager.delegate = self
    }

    // MARK: - Public Methods

    func connect() {
        state.setState(.connecting)
        webSocketManager.connect(to: settings.serverURL)
    }

    func disconnect() {
        stopRecording()
        webSocketManager.disconnect()
        cameraManager.stopSession()
        state.setState(.idle)
    }

    func setupCamera() {
        do {
            try cameraManager.setupCamera(
                fps: settings.recordingFPS,
                resolution: settings.recordingResolution
            )
            cameraManager.startSession()
        } catch {
            print("❌ Camera setup error: \(error)")
            state.setState(.error, error: error.localizedDescription)
        }
    }

    func getPreviewLayer() -> AVCaptureVideoPreviewLayer {
        return cameraManager.getPreviewLayer()
    }

    // MARK: - Recording Control

    private func startRecording() {
        guard !state.isRecording else { return }

        // 디스크 공간 확인
        guard cameraManager.checkDiskSpace() else {
            state.setState(.error, error: "디스크 공간이 부족합니다.")
            return
        }

        do {
            try cameraManager.startRecording()
            streamingManager?.resetFrameCounter()
            state.setState(.recording)
            state.resetRecordingStats()

            // 타이머 시작 (녹화 시간 업데이트)
            startRecordingTimer()

            // 서버에 상태 전송
            webSocketManager.sendStatus("recording")
        } catch {
            print("❌ Failed to start recording: \(error)")
            state.setState(.error, error: error.localizedDescription)
        }
    }

    private func stopRecording() {
        guard state.isRecording else { return }

        cameraManager.stopRecording()
        stopRecordingTimer()
    }

    // MARK: - Recording Timer

    private func startRecordingTimer() {
        recordingTimer?.invalidate()
        recordingTimer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true) { [weak self] _ in
            guard let self = self else { return }
            self.state.updateRecordingStats(
                duration: self.state.recordingDuration + 0.1,
                frames: self.state.frameCount
            )
        }
    }

    private func stopRecordingTimer() {
        recordingTimer?.invalidate()
        recordingTimer = nil
    }

    // MARK: - Upload

    private func uploadVideo(fileURL: URL) {
        state.setState(.uploading)
        webSocketManager.sendStatus("uploading")

        let uploadURL = settings.autoGeneratedUploadURL

        uploadManager.uploadWithRetry(
            fileURL: fileURL,
            to: uploadURL,
            progress: { [weak self] progress in
                self?.state.updateUploadProgress(progress)
            },
            completion: { [weak self] success, error in
                guard let self = self else { return }

                if success {
                    print("✅ Upload completed")

                    // 업로드 성공 후 파일 삭제 (옵션)
                    try? FileManager.default.removeItem(at: fileURL)

                    // 대기 상태로 복귀
                    self.state.setState(.waiting)
                    self.webSocketManager.sendStatus("waiting")
                } else {
                    print("❌ Upload failed: \(error?.localizedDescription ?? "Unknown error")")
                    self.state.setState(.error, error: "업로드 실패: \(error?.localizedDescription ?? "")")
                }
            }
        )
    }
}

// MARK: - CameraManagerDelegate

extension CameraViewController: CameraManagerDelegate {

    func cameraDidStartRecording() {
        print("📹 Recording started")
    }

    func cameraDidStopRecording(fileURL: URL) {
        print("📹 Recording stopped: \(fileURL.lastPathComponent)")

        // 자동 업로드
        uploadVideo(fileURL: fileURL)
    }

    func cameraDidCaptureFrame(_ sampleBuffer: CMSampleBuffer) {
        // 스트리밍 처리
        if state.isRecording {
            streamingManager?.processFrame(sampleBuffer, recordingFPS: settings.recordingFPS)

            // 프레임 카운트 증가
            DispatchQueue.main.async {
                self.state.frameCount += 1
            }
        }
    }

    func cameraDidEncounterError(_ error: Error) {
        state.setState(.error, error: error.localizedDescription)
    }
}

// MARK: - WebSocketManagerDelegate

extension CameraViewController: WebSocketManagerDelegate {

    func webSocketDidConnect() {
        print("✅ WebSocket connected")
        state.setState(.waiting)
        state.resetReconnectAttempts()
    }

    func webSocketDidDisconnect(error: Error?) {
        print("⚠️ WebSocket disconnected")

        if let error = error {
            state.setState(.error, error: error.localizedDescription)
        } else {
            state.setState(.connecting)
        }

        state.incrementReconnectAttempt()
    }

    func webSocketDidReceiveCommand(_ command: String) {
        print("📩 Received command: \(command)")

        switch command {
        case "start":
            startRecording()

        case "stop":
            stopRecording()

        default:
            print("⚠️ Unknown command: \(command)")
        }
    }
}

// MARK: - SwiftUI View

struct CameraView: View {

    @StateObject var controller: CameraViewController
    @State private var showSettings = false

    var body: some View {
        ZStack {
            // 카메라 프리뷰
            CameraPreviewView(previewLayer: controller.getPreviewLayer())
                .edgesIgnoringSafeArea(.all)

            // 오버레이 UI
            VStack {
                // 상단 바
                HStack {
                    Button(action: {
                        showSettings = true
                    }) {
                        HStack {
                            Image(systemName: "chevron.left")
                            Text("설정")
                        }
                        .foregroundColor(.white)
                        .padding(12)
                        .background(Color.black.opacity(0.5))
                        .cornerRadius(8)
                    }
                    .padding()

                    Spacer()
                }

                Spacer()

                // 하단 상태 정보
                VStack(spacing: 12) {
                    // 상태 표시
                    HStack {
                        Text(controller.state.statusDisplayText)
                            .font(.headline)
                            .foregroundColor(.white)

                        if controller.state.isRecording {
                            Circle()
                                .fill(Color.red)
                                .frame(width: 8, height: 8)
                                .opacity(0.8)
                        }
                    }
                    .padding(.horizontal, 20)
                    .padding(.vertical, 12)
                    .background(Color.black.opacity(0.7))
                    .cornerRadius(25)

                    // 연결 정보
                    VStack(spacing: 4) {
                        if controller.state.isConnected {
                            Text("연결: \(controller.settings.serverURL)")
                                .font(.caption)
                                .lineLimit(1)
                        }

                        Text("녹화: \(controller.settings.recordingFPS)fps @ \(controller.settings.recordingResolutionName)")
                            .font(.caption)

                        Text("스트리밍: \(controller.settings.streamingFPS)fps @ \(controller.settings.streamingResolutionName)")
                            .font(.caption)

                        if controller.state.isRecording {
                            Text("프레임: \(controller.state.frameCount)")
                                .font(.caption)
                        }
                    }
                    .foregroundColor(.white.opacity(0.8))
                    .padding(.horizontal, 20)
                    .padding(.vertical, 12)
                    .background(Color.black.opacity(0.5))
                    .cornerRadius(12)

                    // 에러 메시지
                    if let errorMessage = controller.state.errorMessage {
                        Text(errorMessage)
                            .font(.caption)
                            .foregroundColor(.red)
                            .padding(.horizontal, 20)
                            .padding(.vertical, 8)
                            .background(Color.black.opacity(0.7))
                            .cornerRadius(8)
                    }
                }
                .padding(.bottom, 40)
            }
        }
        .onAppear {
            controller.setupCamera()
            controller.connect()
        }
        .onDisappear {
            controller.disconnect()
        }
        .sheet(isPresented: $showSettings) {
            SettingsView(
                settings: controller.settings,
                isPresented: $showSettings,
                onConnect: {
                    showSettings = false
                    controller.disconnect()
                    controller.connect()
                }
            )
        }
    }
}
